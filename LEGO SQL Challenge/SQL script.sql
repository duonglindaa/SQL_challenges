--Create schema
CREATE SCHEMA TIL_PORTFOLIO_PROJECTS.LINDA_DUONG;


--Create tables
CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_COLORS (
	ID INT,
	NAME VARCHAR(50),
	RGB VARCHAR(6),
	IS_TRANS VARCHAR(1)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORIES (
	ID INT,
	VERSION INT,
	SET_NUM VARCHAR(50)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORY_SETS (
	INVENTORY_ID INT,
	SET_NUM VARCHAR(50),
	QUANTITY INT);
    
CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORY_PARTS (
	INVENTORY_ID INT,
	PART_NUM VARCHAR(50),
	COLOR_ID INT,
	QUANTITY INT,
	IS_SPARE VARCHAR(1)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_SETS (
	SET_NUM VARCHAR(50),
	NAME VARCHAR(255),
	YEAR INT,
	THEME_ID INT,
	NUM_PARTS INT
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_PARTS (
	PART_NUM VARCHAR(50),
	NAME VARCHAR(255),
	PART_CAT_ID INT
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_PART_CATEGORIES (
	ID INT,
	NAME VARCHAR(255)
);

create or replace TABLE TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_THEMES (
	ID INT,
	NAME VARCHAR(50),
	PARENT_ID INT
);


--Insert tables into the schema
INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_COLORS(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_COLORS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORIES(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORIES
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORY_PARTS(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORY_PARTS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_INVENTORY_SETS(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORY_SETS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_PARTS(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_PARTS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_PART_CATEGORIES(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_PART_CATEGORIES
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_SETS(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_SETS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.LINDA_DUONG.LEGO_THEMES(
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_THEMES
);


--CREATE ERs
--Relationship between THEMES & SETS
ALTER TABLE LEGO_THEMES ADD PRIMARY KEY (ID);
ALTER TABLE LEGO_SETS ADD FOREIGN KEY (THEME_ID) REFERENCES LEGO_THEMES(ID);

--Relationship between SETS & INVENTORIES
ALTER TABLE LEGO_SETS ADD PRIMARY KEY (SET_NUM);
ALTER TABLE LEGO_INVENTORIES ADD FOREIGN KEY (SET_NUM) REFERENCES LEGO_SETS(SET_NUM);

--Relationship between SETS & INVENTORY SETS
ALTER TABLE LEGO_SETS ADD PRIMARY KEY (SET_NUM);
ALTER TABLE LEGO_INVENTORY_SETS ADD FOREIGN KEY (SET_NUM) REFERENCES LEGO_SETS(SET_NUM);

ALTER TABLE LEGO_INVENTORIES
ALTER COLUMN ID INT;

--Relationship between INVENTORIES & INVENTORY SETS
ALTER TABLE LEGO_INVENTORIES ADD PRIMARY KEY (ID);
ALTER TABLE LEGO_INVENTORY_SETS ADD FOREIGN KEY (INVENTORY_ID) REFERENCES LEGO_INVENTORIES(ID);


--Relationship between INVENTORIES & INVENTORY PARTS
ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (INVENTORY_ID) REFERENCES LEGO_INVENTORIES(ID);

--Relationship between PART CATEGORIES & PARTS
ALTER TABLE LEGO_PART_CATEGORIES ADD PRIMARY KEY (ID);
ALTER TABLE LEGO_PARTS ADD FOREIGN KEY (PART_CAT_ID) REFERENCES LEGO_PART_CATEGORIES(ID);

--Relationship between PARTS & INVENTORY PARTS
ALTER TABLE LEGO_PARTS ADD PRIMARY KEY (PART_NUM);
ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (PART_NUM) REFERENCES LEGO_PARTS(PART_NUM);

--Relationship between COLOURS & INVENTORY PARTS
ALTER TABLE LEGO_COLORS ADD PRIMARY KEY (ID);
ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (COLOR_ID) REFERENCES LEGO_COLORS(ID);


--ANALYSIS OF LEGO SETS
---Identify parts that appear in only one LEGO set. Note the quantity of the part does not matter.
SELECT PARTS.PART_NUM AS UNIQUE_PART_NUMBER, COUNT(DISTINCT SETS.SET_NUM) AS "Number of sets appeared in"
FROM LEGO_SETS AS SETS
LEFT JOIN LEGO_INVENTORIES AS INV ON INV.SET_NUM=SETS.SET_NUM
LEFT JOIN LEGO_INVENTORY_PARTS AS INVP ON INV.ID=INVP.INVENTORY_ID
LEFT JOIN LEGO_PARTS AS PARTS ON PARTS.PART_NUM=INVP.PART_NUM
GROUP BY PARTS.PART_NUM
HAVING COUNT(DISTINCT SETS.SET_NUM)=1
LIMIT 10;

--For each LEGO set, calculate the number of unique parts it includes and the total number of parts (we're looking for a count of the parts, not quantity).
--Calculate the ratio of unique parts to total parts as a measure of 'uniqueness' for each set.
--Enrich your query with the set year and theme name.
WITH UNIQUE_PARTS AS (
SELECT PARTS.PART_NUM AS UNIQUE_PART_NUMBER, COUNT(DISTINCT SETS.SET_NUM) AS "Number of sets appeared in"
FROM LEGO_SETS AS SETS
LEFT JOIN LEGO_INVENTORIES AS INV ON INV.SET_NUM=SETS.SET_NUM
LEFT JOIN LEGO_INVENTORY_PARTS AS INVP ON INV.ID=INVP.INVENTORY_ID
LEFT JOIN LEGO_PARTS AS PARTS ON PARTS.PART_NUM=INVP.PART_NUM
GROUP BY PARTS.PART_NUM
HAVING COUNT(DISTINCT SETS.SET_NUM)=1
)

SELECT  
    SETS.NAME,
    SETS.YEAR,
    T.NAME AS THEME,
    COUNT (DISTINCT U.UNIQUE_PART_NUMBER) AS "Number of unique parts",
    COUNT (DISTINCT INVP.PART_NUM) AS "Number of parts",
    (COUNT (DISTINCT U.UNIQUE_PART_NUMBER)/COUNT (DISTINCT INVP.PART_NUM)) AS UNIQUENESS
FROM LEGO_SETS AS SETS
LEFT JOIN LEGO_INVENTORIES AS INV ON INV.SET_NUM=SETS.SET_NUM
LEFT JOIN LEGO_INVENTORY_PARTS AS INVP ON INV.ID=INVP.INVENTORY_ID
LEFT JOIN UNIQUE_PARTS AS U ON INVP.PART_NUM=U.UNIQUE_PART_NUMBER
LEFT JOIN LEGO_THEMES AS T ON T.ID=SETS.THEME_ID
GROUP BY SETS.NAME, SETS.YEAR, T.NAME
HAVING COUNT (DISTINCT INVP.PART_NUM)>0
ORDER BY UNIQUENESS DESC
;


--Create view
CREATE VIEW SETS_W_UNIQUENESS_RATIO AS
WITH UNIQUE_PARTS AS (
SELECT PARTS.PART_NUM AS UNIQUE_PART_NUMBER, COUNT(DISTINCT SETS.SET_NUM) AS "Number of sets appeared in"
FROM LEGO_SETS AS SETS
LEFT JOIN LEGO_INVENTORIES AS INV ON INV.SET_NUM=SETS.SET_NUM
LEFT JOIN LEGO_INVENTORY_PARTS AS INVP ON INV.ID=INVP.INVENTORY_ID
LEFT JOIN LEGO_PARTS AS PARTS ON PARTS.PART_NUM=INVP.PART_NUM
GROUP BY PARTS.PART_NUM
HAVING COUNT(DISTINCT SETS.SET_NUM)=1
)

SELECT  
    SETS.NAME,
    SETS.YEAR,
    T.NAME AS THEME,
    COUNT (DISTINCT U.UNIQUE_PART_NUMBER) AS "Number of unique parts",
    COUNT (DISTINCT INVP.PART_NUM) AS "Number of parts",
    (COUNT (DISTINCT U.UNIQUE_PART_NUMBER)/COUNT (DISTINCT INVP.PART_NUM)) AS UNIQUENESS
FROM LEGO_SETS AS SETS
LEFT JOIN LEGO_INVENTORIES AS INV ON INV.SET_NUM=SETS.SET_NUM
LEFT JOIN LEGO_INVENTORY_PARTS AS INVP ON INV.ID=INVP.INVENTORY_ID
LEFT JOIN UNIQUE_PARTS AS U ON INVP.PART_NUM=U.UNIQUE_PART_NUMBER
LEFT JOIN LEGO_THEMES AS T ON T.ID=SETS.THEME_ID
GROUP BY SETS.NAME, SETS.YEAR, T.NAME
HAVING COUNT (DISTINCT INVP.PART_NUM)>0
ORDER BY UNIQUENESS DESC
;


--Download data
SELECT *
FROM SETS_W_UNIQUENESS_RATIO;